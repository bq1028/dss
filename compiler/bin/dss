#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const glob = require('glob')
const dss = require('..')
const optimizer = require('../processor').optimizer

const read = filePath => fs.readFileSync(filePath, 'utf-8')

const [globPattern, dist, bundleFilename] = process.argv.slice(2)

const jsSheets = glob.sync(globPattern)

const compilePromises = jsSheets.map(filePath => {
  const css = read(filePath)
  return dss.singleton(css, { filePath, readableClass: process.env.NODE_ENV !== 'production' })
})

Promise.all(compilePromises).then(results => {
  let flush
  results.forEach((result, i) => {
    fs.writeFileSync(
      path.resolve(path.join(dist, path.basename(jsSheets[i])+'.json')),
      JSON.stringify(result.locals, null, 2)
    )
    flush = result.flush
  })

  const css = flush()
  const destPath = path.resolve(path.join(dist, bundleFilename || 'index.css'))
  optimizer(css, { from: 'dss files', to: destPath })
    .then(result => {
      fs.writeFileSync(destPath, result.css)
    })
    .catch(e => { throw e })
}).catch(e => {
  console.error(e)
  process.exit(1)
})
