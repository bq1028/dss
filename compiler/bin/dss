#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const getopts = require("getopts")
const glob = require('glob')
const dss = require('..')
const optimizer = require('../processor').optimizer

const read = filePath => fs.readFileSync(filePath, 'utf-8')

const args = getopts(process.argv.slice(2), {
  alias: {
    t: 'outType',
    n: 'bundleName',
    h: 'help'
  },
  default: {
    outType: 'json',
    bundleName: 'index.css',
    help: false,
  }
})

if (args._.length != 2 && !args.help) {
  console.error('You must specifiy a glob pattern to find .css files and a target directory\n')
  args.help = true
}
if (args.help) {
  const programName = process.argv[1].split('/').slice(-1).toString()
  console.log([
    'Usage:',
    programName + ' <src-glob> <dest-path> [--bundleName<filename.css>] [--outType<json|js>]',
    'Example:',
    programName + ' ./src/**/*.css ./build --bundleName bundle.css --outType js',
    ''
  ].join('\n\n'))
  process.exit(args._.length != 2 ? 1 : 0)
}

const [globPattern, dist] = args._

const jsSheets = glob.sync(globPattern)

if (jsSheets.length === 0) {
  console.error('DSS: the glob ' + globPattern + ' did not match any files.')
  process.exit(1)
}

const compilePromises = jsSheets.map(filePath => {
  const css = read(filePath)
  return dss.singleton(css, { filePath, readableClass: process.env.NODE_ENV !== 'production' })
})

Promise.all(compilePromises).then(results => {
  let flush
  results.forEach((result, i) => {
    const stringified = JSON.stringify(result.locals, null, 2)
    const out = args.outType === 'js' ? `exports = module.exports = ${stringified}` : stringified
    fs.writeFileSync(
      path.resolve(path.join(dist, path.basename(jsSheets[i])+'.'+args.outType)),
      out
    )
    flush = result.flush
  })

  const css = flush()
  const destPath = path.resolve(path.join(dist, args.bundleName))
  optimizer(css, { from: 'dss files', to: destPath })
    .then(result => {
      fs.writeFileSync(destPath, result.css)
    })
    .catch(e => { throw e })
}).catch(e => {
  console.error(e.reason ? `Error in: ${e.file}\n\n${e.reason}` : e)
  process.exit(1)
})
